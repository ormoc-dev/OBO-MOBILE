import 'package:flutter/material.dart';
import 'package:flutter_email_sender/flutter_email_sender.dart';
import 'package:flutter/services.dart';
import '../models/inspection.dart';
import '../models/user.dart';
import '../services/auth_service.dart';

class EmailReportScreen extends StatefulWidget {
  final Inspection inspection;
  final bool isDetailed;

  const EmailReportScreen({
    super.key,
    required this.inspection,
    this.isDetailed = false,
  });

  @override
  State<EmailReportScreen> createState() => _EmailReportScreenState();
}

class _EmailReportScreenState extends State<EmailReportScreen> {
  final _formKey = GlobalKey<FormState>();
  final _recipientsController = TextEditingController();
  final _subjectController = TextEditingController();
  final _bodyController = TextEditingController();
  final _ccController = TextEditingController();
  final _bccController = TextEditingController();
  
  bool _isLoading = false;
  User? _currentUser;
  List<String> _attachmentPaths = [];

  @override
  void initState() {
    super.initState();
    _initializeData();
  }

  @override
  void dispose() {
    _recipientsController.dispose();
    _subjectController.dispose();
    _bodyController.dispose();
    _ccController.dispose();
    _bccController.dispose();
    super.dispose();
  }

  Future<void> _initializeData() async {
    try {
      final user = await AuthService.getCurrentUser();
      setState(() {
        _currentUser = user;
      });
      
      // Pre-fill form with inspection data
      _subjectController.text = widget.isDetailed 
          ? 'Detailed Inspection Report #${widget.inspection.id.substring(widget.inspection.id.length - 8)}'
          : 'Inspection Report #${widget.inspection.id.substring(widget.inspection.id.length - 8)}';
      
      _bodyController.text = widget.isDetailed 
          ? _generateDetailedReport()
          : _generateQuickReport();
      
      // Pre-fill recipient with a default email if needed
      // Note: User model doesn't have email field, so we leave recipients empty for user to fill
    } catch (e) {
      print('Error initializing email data: $e');
    }
  }

  String _generateQuickReport() {
    final inspectorName = _currentUser?.name ?? 'Unknown Inspector';
    final createdDate = _formatDateTime(widget.inspection.createdAt);
    
    // Quick status check
    final sectionStatuses = widget.inspection.sectionStatus.values.toList();
    final hasInProgress = sectionStatuses.contains('in_progress');
    final hasPassed = sectionStatuses.contains('passed');
    final hasNotPassed = sectionStatuses.contains('not_passed');
    
    String status = 'No sections';
    if (sectionStatuses.isNotEmpty) {
      if (hasInProgress) status = 'In Progress';
      else if (hasPassed || hasNotPassed) status = 'Completed';
    }
    
    // Count completed sections
    int completedSections = 0;
    if (widget.inspection.mechanicalRemarks.isNotEmpty || widget.inspection.mechanicalAssessment.isNotEmpty) completedSections++;
    if (widget.inspection.lineGradeRemarks.isNotEmpty || widget.inspection.lineGradeAssessment.isNotEmpty) completedSections++;
    if (widget.inspection.architecturalRemarks.isNotEmpty || widget.inspection.architecturalAssessment.isNotEmpty) completedSections++;
    if (widget.inspection.civilStructuralRemarks.isNotEmpty || widget.inspection.civilStructuralAssessment.isNotEmpty) completedSections++;
    if (widget.inspection.sanitaryPlumbingRemarks.isNotEmpty || widget.inspection.sanitaryPlumbingAssessment.isNotEmpty) completedSections++;
    if (widget.inspection.electricalElectronicsRemarks.isNotEmpty || widget.inspection.electricalElectronicsAssessment.isNotEmpty) completedSections++;
    
    return '''INSPECTION REPORT SUMMARY

Inspection ID: ${widget.inspection.id.substring(widget.inspection.id.length - 8)}
Inspector: $inspectorName
Date: $createdDate
Status: $status
Sections Completed: $completedSections/6
Photos: ${widget.inspection.imagePaths.length}
Videos: ${widget.inspection.videoPaths.length}
Sync Status: ${widget.inspection.isSynced ? 'Synced' : 'Pending'}

QR Code Data:
${widget.inspection.scannedData}

Location: ${widget.inspection.latitude != null && widget.inspection.longitude != null 
  ? 'Lat: ${widget.inspection.latitude!.toStringAsFixed(6)}, Lng: ${widget.inspection.longitude!.toStringAsFixed(6)}' 
  : 'Not available'}

---
Office of Building Official - Ormoc City
Generated by OBO Mobile Inspector App

For detailed inspection data, please refer to the mobile application.''';
  }

  String _generateDetailedReport() {
    final currentDate = DateTime.now();
    final inspectorName = _currentUser?.name ?? 'Unknown Inspector';
    
    // Format dates
    final createdDate = _formatDateTime(widget.inspection.createdAt);
    final updatedDate = _formatDateTime(widget.inspection.updatedAt);
    
    // Get section status summary
    final sectionStatuses = widget.inspection.sectionStatus.values.toList();
    final hasInProgress = sectionStatuses.contains('in_progress');
    final hasPassed = sectionStatuses.contains('passed');
    final hasNotPassed = sectionStatuses.contains('not_passed');
    
    String completionStatus = 'No sections';
    if (sectionStatuses.isNotEmpty) {
      if (hasInProgress) {
        completionStatus = 'In Progress';
      } else if (hasPassed || hasNotPassed) {
        completionStatus = 'Completed';
      }
    }
    
    // Build sections details
    String sectionsDetails = '';
    if (widget.inspection.mechanicalRemarks.isNotEmpty || widget.inspection.mechanicalAssessment.isNotEmpty) {
      sectionsDetails += '• Mechanical Assessment:\n';
      if (widget.inspection.mechanicalRemarks.isNotEmpty) {
        sectionsDetails += '  Remarks: ${widget.inspection.mechanicalRemarks}\n';
      }
      if (widget.inspection.mechanicalAssessment.isNotEmpty) {
        sectionsDetails += '  Assessment: ${widget.inspection.mechanicalAssessment}\n';
      }
      sectionsDetails += '\n';
    }
    
    if (widget.inspection.lineGradeRemarks.isNotEmpty || widget.inspection.lineGradeAssessment.isNotEmpty) {
      sectionsDetails += '• Line and Grade Assessment:\n';
      if (widget.inspection.lineGradeRemarks.isNotEmpty) {
        sectionsDetails += '  Remarks: ${widget.inspection.lineGradeRemarks}\n';
      }
      if (widget.inspection.lineGradeAssessment.isNotEmpty) {
        sectionsDetails += '  Assessment: ${widget.inspection.lineGradeAssessment}\n';
      }
      sectionsDetails += '\n';
    }
    
    if (widget.inspection.architecturalRemarks.isNotEmpty || widget.inspection.architecturalAssessment.isNotEmpty) {
      sectionsDetails += '• Architectural Assessment:\n';
      if (widget.inspection.architecturalRemarks.isNotEmpty) {
        sectionsDetails += '  Remarks: ${widget.inspection.architecturalRemarks}\n';
      }
      if (widget.inspection.architecturalAssessment.isNotEmpty) {
        sectionsDetails += '  Assessment: ${widget.inspection.architecturalAssessment}\n';
      }
      sectionsDetails += '\n';
    }
    
    if (widget.inspection.civilStructuralRemarks.isNotEmpty || widget.inspection.civilStructuralAssessment.isNotEmpty) {
      sectionsDetails += '• Civil/Structural Assessment:\n';
      if (widget.inspection.civilStructuralRemarks.isNotEmpty) {
        sectionsDetails += '  Remarks: ${widget.inspection.civilStructuralRemarks}\n';
      }
      if (widget.inspection.civilStructuralAssessment.isNotEmpty) {
        sectionsDetails += '  Assessment: ${widget.inspection.civilStructuralAssessment}\n';
      }
      sectionsDetails += '\n';
    }
    
    if (widget.inspection.sanitaryPlumbingRemarks.isNotEmpty || widget.inspection.sanitaryPlumbingAssessment.isNotEmpty) {
      sectionsDetails += '• Sanitary/Plumbing Assessment:\n';
      if (widget.inspection.sanitaryPlumbingRemarks.isNotEmpty) {
        sectionsDetails += '  Remarks: ${widget.inspection.sanitaryPlumbingRemarks}\n';
      }
      if (widget.inspection.sanitaryPlumbingAssessment.isNotEmpty) {
        sectionsDetails += '  Assessment: ${widget.inspection.sanitaryPlumbingAssessment}\n';
      }
      sectionsDetails += '\n';
    }
    
    if (widget.inspection.electricalElectronicsRemarks.isNotEmpty || widget.inspection.electricalElectronicsAssessment.isNotEmpty) {
      sectionsDetails += '• Electrical/Electronics Assessment:\n';
      if (widget.inspection.electricalElectronicsRemarks.isNotEmpty) {
        sectionsDetails += '  Remarks: ${widget.inspection.electricalElectronicsRemarks}\n';
      }
      if (widget.inspection.electricalElectronicsAssessment.isNotEmpty) {
        sectionsDetails += '  Assessment: ${widget.inspection.electricalElectronicsAssessment}\n';
      }
      sectionsDetails += '\n';
    }
    
    if (sectionsDetails.isEmpty) {
      sectionsDetails = 'No inspection sections were completed.\n\n';
    }
    
    // Location information
    String locationInfo = 'Not available';
    if (widget.inspection.latitude != null && widget.inspection.longitude != null) {
      locationInfo = 'Lat: ${widget.inspection.latitude!.toStringAsFixed(8)}, Lng: ${widget.inspection.longitude!.toStringAsFixed(8)}';
    }
    
    // Timing information
    String timingInfo = '';
    if (widget.inspection.inspectionStartTime != null) {
      timingInfo += '• Start Time: ${_formatDateTime(widget.inspection.inspectionStartTime!)}\n';
    }
    if (widget.inspection.inspectionEndTime != null) {
      timingInfo += '• End Time: ${_formatDateTime(widget.inspection.inspectionEndTime!)}\n';
    }
    if (widget.inspection.inspectionStartTime != null && widget.inspection.inspectionEndTime != null) {
      timingInfo += '• Duration: ${_calculateDuration(widget.inspection.inspectionStartTime!, widget.inspection.inspectionEndTime!)}\n';
    }
    if (timingInfo.isEmpty) {
      timingInfo = 'No timing information available.\n';
    }
    
    return '''INSPECTION REPORT
=================

Report Generated: ${currentDate.toString()}
Inspector: $inspectorName
Inspector ID: ${_currentUser?.id ?? 'N/A'}

INSPECTION DETAILS
------------------
Inspection ID: ${widget.inspection.id.substring(widget.inspection.id.length - 8)}
QR Code Data: ${widget.inspection.scannedData}
Location: $locationInfo
Created: $createdDate
Updated: $updatedDate
User ID: ${widget.inspection.userId ?? 'N/A'}

INSPECTION SECTIONS
-------------------
$sectionsDetails
MEDIA FILES
-----------
• Photos: ${widget.inspection.imagePaths.length}
• Videos: ${widget.inspection.videoPaths.length}

TIMING INFORMATION
-----------------
$timingInfo
STATUS
------
• Sync Status: ${widget.inspection.isSynced ? 'Synced' : 'Pending'}
• Completion Status: $completionStatus

---
This report was generated by the OBO Mobile Inspector App.
For detailed information, please refer to the full inspection data in the mobile application.

Office of Building Official
Ormoc City
''';
  }

  String _formatDateTime(DateTime dateTime) {
    return '${dateTime.day}/${dateTime.month}/${dateTime.year} ${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';
  }

  String _calculateDuration(DateTime start, DateTime end) {
    final duration = end.difference(start);
    final hours = duration.inHours;
    final minutes = duration.inMinutes % 60;

    if (hours > 0) {
      return '${hours}h ${minutes}m';
    } else {
      return '${minutes}m';
    }
  }

  Future<void> _sendEmail() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      final Email email = Email(
        body: _bodyController.text,
        subject: _subjectController.text,
        recipients: _recipientsController.text.split(',').map((e) => e.trim()).toList(),
        cc: _ccController.text.isNotEmpty 
            ? _ccController.text.split(',').map((e) => e.trim()).toList()
            : <String>[],
        bcc: _bccController.text.isNotEmpty 
            ? _bccController.text.split(',').map((e) => e.trim()).toList()
            : <String>[],
        attachmentPaths: _attachmentPaths,
        isHTML: false,
      );

      await FlutterEmailSender.send(email);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Email sent successfully!'),
            backgroundColor: Color(0xFF10B981),
            duration: Duration(seconds: 3),
          ),
        );
        Navigator.of(context).pop();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to send email: $e'),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 3),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final screenSize = MediaQuery.of(context).size;
    final isTablet = screenSize.width > 600;

    return Scaffold(
      backgroundColor: const Color(0xFFF8FAFC),
      appBar: AppBar(
        title: Text(
          widget.isDetailed ? 'Send Detailed Report' : 'Send Quick Report',
          style: TextStyle(
            fontSize: isTablet ? 20 : 18,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
        ),
        backgroundColor: const Color(0xFF3B82F6),
        elevation: 0,
        iconTheme: const IconThemeData(color: Colors.white),
        actions: [
          if (_isLoading)
            const Padding(
              padding: EdgeInsets.all(16.0),
              child: SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
              ),
            )
          else
            TextButton(
              onPressed: _sendEmail,
              child: const Text(
                'Send',
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
            ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: EdgeInsets.all(isTablet ? 24 : 16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Inspection Info Card
              Container(
                width: double.infinity,
                padding: EdgeInsets.all(isTablet ? 20 : 16),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: const Color(0xFFE2E8F0), width: 1),
                  boxShadow: const [
                    BoxShadow(
                      color: Color(0xFFE2E8F0),
                      offset: Offset(0, 2),
                      blurRadius: 4,
                      spreadRadius: 0,
                    ),
                  ],
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Container(
                          padding: const EdgeInsets.all(8),
                          decoration: BoxDecoration(
                            color: const Color(0xFF3B82F6).withOpacity(0.1),
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: const Icon(
                            Icons.assessment_rounded,
                            color: Color(0xFF3B82F6),
                            size: 20,
                          ),
                        ),
                        const SizedBox(width: 12),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                'Inspection Report',
                                style: TextStyle(
                                  fontSize: isTablet ? 18 : 16,
                                  fontWeight: FontWeight.bold,
                                  color: const Color(0xFF1F2937),
                                ),
                              ),
                              Text(
                                'ID: ${widget.inspection.id.substring(widget.inspection.id.length - 8)}',
                                style: TextStyle(
                                  fontSize: isTablet ? 12 : 10,
                                  color: const Color(0xFF6B7280),
                                  fontFamily: 'monospace',
                                ),
                              ),
                            ],
                          ),
                        ),
                        Container(
                          padding: EdgeInsets.symmetric(
                            horizontal: isTablet ? 12 : 8,
                            vertical: isTablet ? 6 : 4,
                          ),
                          decoration: BoxDecoration(
                            color: widget.isDetailed 
                                ? const Color(0xFF8B5CF6)
                                : const Color(0xFF10B981),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text(
                            widget.isDetailed ? 'Detailed' : 'Quick',
                            style: TextStyle(
                              fontSize: isTablet ? 12 : 10,
                              fontWeight: FontWeight.w600,
                              color: Colors.white,
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 12),
                    Row(
                      children: [
                        _buildInfoChip('Photos', widget.inspection.imagePaths.length.toString(), Icons.photo_camera_rounded, isTablet),
                        const SizedBox(width: 8),
                        _buildInfoChip('Videos', widget.inspection.videoPaths.length.toString(), Icons.videocam_rounded, isTablet),
                        const SizedBox(width: 8),
                        _buildInfoChip('Status', widget.inspection.isSynced ? 'Synced' : 'Pending', 
                            widget.inspection.isSynced ? Icons.cloud_done_rounded : Icons.cloud_off_rounded, isTablet),
                      ],
                    ),
                  ],
                ),
              ),
              
              const SizedBox(height: 24),
              
              // Email Form
              Container(
                width: double.infinity,
                padding: EdgeInsets.all(isTablet ? 20 : 16),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: const Color(0xFFE2E8F0), width: 1),
                  boxShadow: const [
                    BoxShadow(
                      color: Color(0xFFE2E8F0),
                      offset: Offset(0, 2),
                      blurRadius: 4,
                      spreadRadius: 0,
                    ),
                  ],
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Email Details',
                      style: TextStyle(
                        fontSize: isTablet ? 18 : 16,
                        fontWeight: FontWeight.bold,
                        color: const Color(0xFF1F2937),
                      ),
                    ),
                    const SizedBox(height: 16),
                    
                    // Recipients
                    _buildTextField(
                      controller: _recipientsController,
                      label: 'Recipients',
                      hint: 'Enter email addresses (comma-separated)',
                      icon: Icons.email_outlined,
                      isRequired: true,
                      isTablet: isTablet,
                    ),
                    
                    const SizedBox(height: 16),
                    
                    // Subject
                    _buildTextField(
                      controller: _subjectController,
                      label: 'Subject',
                      hint: 'Enter email subject',
                      icon: Icons.subject_outlined,
                      isRequired: true,
                      isTablet: isTablet,
                    ),
                    
                    const SizedBox(height: 16),
                    
                    // CC
                    _buildTextField(
                      controller: _ccController,
                      label: 'CC (Optional)',
                      hint: 'Enter CC email addresses',
                      icon: Icons.copy_outlined,
                      isRequired: false,
                      isTablet: isTablet,
                    ),
                    
                    const SizedBox(height: 16),
                    
                    // BCC
                    _buildTextField(
                      controller: _bccController,
                      label: 'BCC (Optional)',
                      hint: 'Enter BCC email addresses',
                      icon: Icons.visibility_off_outlined,
                      isRequired: false,
                      isTablet: isTablet,
                    ),
                    
                    const SizedBox(height: 16),
                    
                    // Body
                    _buildTextField(
                      controller: _bodyController,
                      label: 'Message Body',
                      hint: 'Enter your message',
                      icon: Icons.message_outlined,
                      isRequired: true,
                      isTablet: isTablet,
                      maxLines: 8,
                    ),
                  ],
                ),
              ),
              
              const SizedBox(height: 24),
              
              // Attachments Section
              Container(
                width: double.infinity,
                padding: EdgeInsets.all(isTablet ? 20 : 16),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: const Color(0xFFE2E8F0), width: 1),
                  boxShadow: const [
                    BoxShadow(
                      color: Color(0xFFE2E8F0),
                      offset: Offset(0, 2),
                      blurRadius: 4,
                      spreadRadius: 0,
                    ),
                  ],
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        const Icon(
                          Icons.attach_file_rounded,
                          color: Color(0xFF3B82F6),
                          size: 20,
                        ),
                        const SizedBox(width: 8),
                        Text(
                          'Attachments',
                          style: TextStyle(
                            fontSize: isTablet ? 18 : 16,
                            fontWeight: FontWeight.bold,
                            color: const Color(0xFF1F2937),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 12),
                    Text(
                      'Inspection photos and videos will be attached automatically when available.',
                      style: TextStyle(
                        fontSize: isTablet ? 14 : 12,
                        color: const Color(0xFF6B7280),
                      ),
                    ),
                    if (widget.inspection.imagePaths.isNotEmpty || widget.inspection.videoPaths.isNotEmpty) ...[
                      const SizedBox(height: 12),
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: const Color(0xFFF0F9FF),
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: const Color(0xFF0EA5E9), width: 1),
                        ),
                        child: Row(
                          children: [
                            const Icon(
                              Icons.info_outline_rounded,
                              color: Color(0xFF0EA5E9),
                              size: 16,
                            ),
                            const SizedBox(width: 8),
                            Expanded(
                              child: Text(
                                '${widget.inspection.imagePaths.length} photos and ${widget.inspection.videoPaths.length} videos will be attached to the email.',
                                style: TextStyle(
                                  fontSize: isTablet ? 12 : 10,
                                  color: const Color(0xFF0EA5E9),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ],
                ),
              ),
              
              const SizedBox(height: 32),
              
              // Send Button
              SizedBox(
                width: double.infinity,
                height: isTablet ? 56 : 48,
                child: ElevatedButton.icon(
                  onPressed: _isLoading ? null : _sendEmail,
                  icon: _isLoading 
                      ? const SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                          ),
                        )
                      : const Icon(Icons.send_rounded, color: Colors.white),
                  label: Text(
                    _isLoading ? 'Sending...' : 'Send Email',
                    style: TextStyle(
                      fontSize: isTablet ? 16 : 14,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF3B82F6),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                    elevation: 0,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String label,
    required String hint,
    required IconData icon,
    required bool isRequired,
    required bool isTablet,
    int maxLines = 1,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(icon, color: const Color(0xFF3B82F6), size: isTablet ? 18 : 16),
            const SizedBox(width: 8),
            Text(
              label,
              style: TextStyle(
                fontSize: isTablet ? 14 : 12,
                fontWeight: FontWeight.w600,
                color: const Color(0xFF374151),
              ),
            ),
            if (isRequired) ...[
              const SizedBox(width: 4),
              const Text(
                '*',
                style: TextStyle(
                  color: Colors.red,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ],
        ),
        const SizedBox(height: 8),
        TextFormField(
          controller: controller,
          maxLines: maxLines,
          validator: isRequired ? (value) {
            if (value == null || value.trim().isEmpty) {
              return 'This field is required';
            }
            return null;
          } : null,
          decoration: InputDecoration(
            hintText: hint,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Color(0xFFE2E8F0)),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Color(0xFF3B82F6), width: 2),
            ),
            contentPadding: EdgeInsets.symmetric(
              horizontal: isTablet ? 16 : 12,
              vertical: isTablet ? 16 : 12,
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildInfoChip(String label, String value, IconData icon, bool isTablet) {
    return Container(
      padding: EdgeInsets.symmetric(
        horizontal: isTablet ? 12 : 8,
        vertical: isTablet ? 6 : 4,
      ),
      decoration: BoxDecoration(
        color: const Color(0xFFF0F9FF),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: const Color(0xFF0EA5E9), width: 1),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, color: const Color(0xFF0EA5E9), size: isTablet ? 14 : 12),
          const SizedBox(width: 4),
          Text(
            '$label: $value',
            style: TextStyle(
              fontSize: isTablet ? 12 : 10,
              fontWeight: FontWeight.w600,
              color: const Color(0xFF0EA5E9),
            ),
          ),
        ],
      ),
    );
  }
}
